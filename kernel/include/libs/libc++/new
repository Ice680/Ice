#pragma once

#include <stddef.h>
#include <cstddef>

namespace std {
enum class align_val_t : size_t {};

template <typename T>
[[nodiscard]] constexpr T* launder(T* p) noexcept {
    return __builtin_launder(p);
}
}  // namespace std

[[nodiscard]] void* operator new(size_t size);
[[nodiscard]] void* operator new(size_t size, std::align_val_t);
[[nodiscard]] void* operator new[](size_t size);
[[nodiscard]] void* operator new[](size_t size, std::align_val_t);

[[nodiscard]] inline void* operator new(std::size_t, void* p) noexcept {
    return p;
}

[[nodiscard]] inline void* operator new[](std::size_t, void* p) noexcept {
    return p;
}

void operator delete(void* ptr) noexcept;
void operator delete(void* ptr, std::align_val_t) noexcept;
void operator delete(void* ptr, std::size_t) noexcept;
void operator delete[](void* ptr) noexcept;
void operator delete[](void* ptr, std::align_val_t) noexcept;
void operator delete[](void* ptr, std::size_t) noexcept;

inline void operator delete(void*, void*) noexcept {}

inline void operator delete[](void*, void*) noexcept {}