#pragma once

#include <stddef.h>
#include <cstdint>
#include <type_traits>

namespace std {
template <typename T>
constexpr remove_reference_t<T>&& move(T&& x) noexcept {
    return static_cast<remove_reference_t<T>&&>(x);
}

template <typename T>
constexpr T&& forward(remove_reference_t<T>& x) noexcept {
    return static_cast<T&&>(x);
}

template <typename T>
void swap(T& x, T& y) {
    T temp{move(x)};
    x = move(y);
    y = move(temp);
}

template <class T, class U = T>
T exchange(T& ref, U&& v) {
    T temp = std::move(ref);
    ref = std::forward<U>(v);
    return temp;
}

template <typename I, I... Seq>
class integer_sequence {};

template <size_t... Seq>
using index_sequence = integer_sequence<size_t, Seq...>;

namespace detail {
template <typename I, I X, I N, I... Seq>
struct _make_seq_helper {
    using type = typename _make_seq_helper<I, X + 1, N, Seq..., X>::type;
};

template <typename I, I N, I... Seq>
struct _make_seq_helper<I, N, N, Seq...> {
    using type = integer_sequence<I, Seq...>;
};
}  // namespace detail

template <typename I, I N>
using make_integer_sequence = typename detail::_make_seq_helper<I, 0, N>::type;

template <size_t N>
using make_index_sequence = make_integer_sequence<size_t, N>;

template <typename... T>
using index_sequence_for = make_index_sequence<sizeof...(T)>;

struct source_location {
    static consteval source_location current(
        const char* file = __builtin_FILE(),
        const char* function = __builtin_FUNCTION(),
        uint32_t line = __builtin_LINE(),
        uint32_t column = __builtin_COLUMN()) {
        source_location sl;
        sl.file_ = file;
        sl.function_ = function;
        sl.line_ = line;
        sl.column_ = column;
        return sl;
    }

    source_location() = default;

    const char* file() { return file_; }

    const char* function() { return function_; }

    uint32_t line() { return line_; }

    uint32_t column() { return column_; }

   private:
    const char* file_ = nullptr;
    const char* function_ = nullptr;
    uint32_t line_ = 0;
    uint32_t column_ = 0;
};

template <class T1, class T2>
struct pair {
    using first_type = T1;
    using second_type = T2;

    first_type first;
    second_type second;

    constexpr pair() = default;

    constexpr pair(first_type const& f, second_type const& s)
        : first(f), second(s) {}

    template <class U, class V>
    constexpr pair(const pair<U, V>& p) : first(p.first), second(p.second) {}

    template <class U, class V>
    pair<T1, T2>& operator=(const pair<U, V>& p) {
        first = p.first;
        second = p.second;
        return *this;
    }

    template <class U, class V>
    void operator=(const volatile pair<U, V>& p) volatile {
        first = p.first;
        second = p.second;
    }
};
}  // namespace std